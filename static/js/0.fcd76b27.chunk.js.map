{"version":3,"sources":["../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","Components/Utils.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js","../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js"],"names":["module","exports","__webpack_require__","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","d","__webpack_exports__","_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","Utils","bgColor","percent","r","Math","floor","g","parsedRColor","isNaN","parseInt","toString","parsedGColor","fontColor","getBatteryStateText","batState","getBatteryLevelText","batLvl","getBatteryTimeText","timeTxt","dateVal","Date","toLocaleDateString","toLocaleTimeString","showNotification","_showNotification","C_Users_Nilesh_OneDrive_Documents_VSCodeProjects_reactjsbatterynotifier_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","C_Users_Nilesh_OneDrive_Documents_VSCodeProjects_reactjsbatterynotifier_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","title","logo","body","appTitle","text","wrap","_context","prev","next","window","Notification","permission","icon","tag","requestermission","status","console","log","stop","_x","_x2","_x3","_typeof2","obj","Symbol","iterator","constructor","prototype","_typeof","_possibleConstructorReturn","call","ReferenceError","_assertThisInitialized","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","create","writable","configurable","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","e","global","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","GeneratorFunctionPrototype","Generator","GeneratorFunction","displayName","isGeneratorFunction","genFun","ctor","name","awrap","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","result","keys","object","push","reverse","length","pop","Context","reset","skipTempReset","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","slice","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","previousPromise","callInvokeWithMethodAndArg","invoke","unwrapped","return","pushTryEntry","locs","iteratorMethod"],"mappings":"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","file":"static/js/0.fcd76b27.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","let Utils = {\r\n\r\n    bgColor: (percent) => {\r\n        const r = percent < 50 || percent === 0 ? 255 : Math.floor(255-(percent*2-100)*255/100);\r\n        const g = percent > 50 ? 255 : Math.floor(((percent*2)*255)/100);\r\n        const parsedRColor = !isNaN(parseInt(r.toString())) ? parseInt(r.toString()) : 0;\r\n        const parsedGColor = !isNaN(parseInt(g.toString())) ? parseInt(g.toString()) : 0;\r\n        //console.log('bgColor for '+ percent.toString() +' : rgb(' + parsedRColor.toString() + ',' + parsedGColor.toString() + ',0)');\r\n        return 'rgb(' + parsedRColor.toString() + ',' + parsedGColor.toString() + ',0)';\r\n    },\r\n\r\n    fontColor: (percent) => {\r\n        return 'black';//(percent >= 45 && percent <= 60) ? 'black' : 'white';\r\n    },\r\n\r\n    getBatteryStateText: (batState) => {\r\n\t\tif (batState != null) {\r\n\t\t\tif (batState === true) {\r\n\t\t\t\treturn 'Charging';\r\n\t\t\t} else if (batState === false) {\r\n\t\t\t\treturn 'Discharging';\r\n\t\t\t} else {\r\n\t\t\t\treturn 'Full';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t},\r\n\r\n\tgetBatteryLevelText: (batLvl) => {\r\n\t\treturn (batLvl * 100) + '%';\r\n\t},\r\n\r\n\tgetBatteryTimeText: (timeTxt) => {\r\n\t\tconst dateVal = new Date(timeTxt)\r\n\t\treturn dateVal.toLocaleDateString() + ' ' + dateVal.toLocaleTimeString();\r\n\t},\r\n\r\n\tshowNotification: async (title, logo, body) => {\r\n\t\tconst appTitle = title;\r\n\t\tconst text = body;\r\n\t\tif (window.Notification && Notification.permission === \"granted\") {\r\n\t\t\tnew Notification(appTitle, {\r\n\t\t\t\tbody: text,\r\n\t\t\t\ticon: logo,\r\n\t\t\t\ttag: 'soManyNotification'\r\n\t\t\t});\r\n\t\t} else if (window.Notification && Notification.permission !== \"denied\") {\r\n\t\t\tNotification.requestermission(function (status) {\r\n\t\t\t\tif (status === \"granted\") {\r\n\t\t\t\t\tnew Notification(appTitle, {\r\n\t\t\t\t\t\tbody: text,\r\n\t\t\t\t\t\ticon: logo,\r\n\t\t\t\t\t\ttag: 'soManyNotification'\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"permission not granted - 2\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"permission not granted - 1\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nexport default Utils;\r\n","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n"],"sourceRoot":""}